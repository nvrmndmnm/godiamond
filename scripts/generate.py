#!/usr/bin/env python3

# This script might be useful for further growing and upgrading your Diamond contracts.
# It generates Go bindings for all Solidity contracts in the source directory.
#
# Ensure that your contracts are properly built (refer to scripts/build.sh)
# and abigen from go-ethereum and PyYAML are installed on your system.
import os
import subprocess
import yaml

def get_bytecode_object(json_path):
    with open(json_path, 'r') as f:
        data = yaml.safe_load(f)
    return data['bytecode']['object']

def write_bytecode_object(bytecode_object, bin_path):
    with open(bin_path, 'w') as f:
        f.write(bytecode_object)

def generate_go_bindings(abi_path, bin_path, pkg, name, out_path):
    subprocess.run(['abigen', '--abi', abi_path, '--bin', bin_path,
                    '--pkg', pkg, '--type', name, '--out', out_path], check=True)

def main():
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(script_dir)

    src = os.path.join(project_root, 'contracts', 'src')
    out = os.path.join(project_root, 'contracts', 'out')

    diamond_dir = os.path.join(project_root, 'internal', 'diamond')
    facets_dir = os.path.join(project_root, 'internal', 'facets')

    os.makedirs(diamond_dir, exist_ok=True)
    os.makedirs(facets_dir, exist_ok=True)

    for root, dirs, files in os.walk(src):
        for file in files:
            if file.endswith('.sol') and 'interfaces' not in root and 'libraries' not in root:
                name = os.path.splitext(file)[0]
                # JSON metadata file generated by Foundry
                json_path = os.path.join(out, f'{name}.sol', f'{name}.json')
                abi_path = os.path.join(out, f'{name}.sol', f'{name}.abi.json')
                bin_path = os.path.join(out, f'{name}.sol', f'{name}.bin')

                bytecode_object = get_bytecode_object(json_path)
                write_bytecode_object(bytecode_object, bin_path)

                n = name.lower()
                # The Diamond bindings are placed to its own package to avoid type clashes.
                pkg = 'diamond' if name == 'Diamond' else 'facets'
                out_path = os.path.join(project_root, 'internal', pkg, f'{n}.go')

                generate_go_bindings(abi_path, bin_path, pkg, name, out_path)

if __name__ == '__main__':
    main()
